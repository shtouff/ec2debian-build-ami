#!/bin/bash

# Stop execution if any command fails
set -e

# Rember various paths
scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
originaldir=$(pwd)

source $scriptdir/utils

# Tasks, packages, plugins, boot scripts
tasks=()
packages=()
excluded_packages=()
host_packages=()
plugins=()
init_scripts=()

# General options about the instance
arch='amd64'
locale='en_US'
charmap='UTF-8'
timezone='UTC'
apt_mirror=

# Hardcoded params.
# This script would explode if we had to take care of other distributions
distribution='debian'
codename='wheezy'
ami_name_suffix=$(date +%Y%m%d)
description=

# EC2 host info
instance_id=
region=
availability_zone=

# Volume and AMI info
# Filesystem, hardcoded for now, maybe we'll add a parameter later on
filesystem='ext4'
mountoptions=
volume_size='1'
device_path=
imagedir='/mnt/image'
volume_id=
snapshot_id=
ami_id=

# List of options
help="ec2debian-buil-ami
This script creates a Debian Squeeze Amazon Machine Image.

Options (defaults in ${txtbld}bold${txtdef}):

${txtund}Bootstrapping${txtdef}
    --arch ARCH [i386|${txtbld}amd64${txtdef}]      Processor architecture of the image
    --filesystem FS [ext2..4|${txtbld}xfs${txtdef}] The filesystem of the root volume
    --volume-size SIZE            The default size of the root volume in GB (${txtbld}1${txtdef})
    --plugin FILE                 Path to plugin script.
                                  Can be specified more than once.

    --timezone ZONE               Standard timezone (${txtbld}UTC${txtdef})
    --locale LOCALE               Standard locale (${txtbld}en_US${txtdef})
    --charmap CHARMAP             Standard charmap (${txtbld}UTF-8${txtdef})

    --imagedir DIR                Bootstrap directory (${txtbld}/mnt/image${txtdef})

    --name SUFFIX                 AMI name suffix (${txtbld}current date${txtdef})
    --description DESC            Description of the AMI

${txtund}AWS${txtdef}
    --user ID                     User ID (${txtbld}AWS_USER_ID${txtdef})
    --access-key ID               Access key ID (${txtbld}AWS_ACCESS_KEY_ID${txtdef})
    --secret-key KEY              Secret access key (${txtbld}AWS_SECRET_ACCESS_KEY_ID${txtdef})
    --cert PATH                   Certificate (${txtbld}EC2_CERT${txtdef})
    --private-key PATH            Certificate private key (${txtbld}EC2_PRIVATE_KEY${txtdef})

${txtund}Other options${txtdef}
    --debug                       Print debugging information
    --help                        Prints this help message
"

while [ $# -gt 0 ]; do
	case $1 in
		--arch)        arch=$2;                       shift 2 ;;
		--filesystem)  filesystem=$2;                 shift 2 ;;
		--volume-size) volume_size=$2;                shift 2 ;;
		--name)        ami_name_suffix=$2;            shift 2 ;;
		--description) description=$2;                shift 2 ;;
		--user)        AWS_USER_ID=$2;                shift 2 ;;
		--access-key)  AWS_ACCESS_KEY_ID=$2;          shift 2 ;;
		--secret-key)  AWS_SECRET_ACCESS_KEY=$2;      shift 2 ;;
		--cert)        EC2_CERT=$2;                   shift 2 ;;
		--private-key) EC2_PRIVATE_KEY=$2;            shift 2 ;;
		--timezone)    timezone=$2;                   shift 2 ;;
		--locale)      locale=$2;                     shift 2 ;;
		--charmap)     charmap=$2;                    shift 2 ;;
		--imagedir)    imagedir=$2;                   shift 2 ;;
		--plugin)      plugins+=("$2");               shift 2 ;;
		--debug)       set -x;                        shift   ;;
		--help)        printf -- "$help";             exit 0  ;;
		*)             die "Unrecognized option: $1" \
    "Type '$0 --help' to see a list of possible options"; ;;
	esac
done

case $filesystem in
	xfs)  ;;
	ext2) ;;
	ext3) ;;
	ext4) ;;
	*)    die "The filesystem $filesystem was not recognized." \
	          "Valid filesystems are ext[2-4] and xfs"      ;;
esac

# Required and default parameters
true ${AWS_USER_ID:?} ${AWS_ACCESS_KEY_ID:?} ${AWS_SECRET_ACCESS_KEY:?} \
		${EC2_CERT:?} ${EC2_PRIVATE_KEY:?}

# Check the architecture
[[ $arch != 'amd64' ]] && die "Unrecognized architecture: $arch"

# Quit if we can't find the certificate
[ ! -f "$EC2_CERT" ] && die "AWS certificate file not found:" "$EC2_CERT"

# ... or the private key.
[ ! -f "$EC2_PRIVATE_KEY" ] && die "AWS private key file not found:" "$EC2_PRIVATE_KEY"

export AWS_USER_ID AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY EC2_CERT EC2_PRIVATE_KEY

# Put all tasks in the tasks folder into an array
for task in `find $scriptdir/tasks -type f | sort`; do
	tasks+=($task)
done

TASK_PACKAGES="01-packages"
TASK_VOLUME="10-create-volume"
TASK_BOOTSTRAP="14-bootstrap"
TASK_MOUNT="15-mount"
TASK_APTSOURCES="21-apt-sources"
TASK_INITSCRIPTS="51-init-scripts"
TASK_UNMOUNT="71-unmount"
TASK_SNAPSHOT="80-ebs-snapshot"
TASK_CREATEAMI="81-register-ami"

# Invoke plugins so that they may reorder and add tasks
for plugin in "${plugins[@]}"; do
	[ -e $plugin ] || die "The plugin file $plugin does not exist."
	plugindir=`dirname $plugin`
	source $plugin
done

# Source all tasks in the right order
for task in ${tasks[*]}; do
	[ -e $task ] || die "The task $task does not exist."
	log "Run task: `basename $task`"
	source $task
done
